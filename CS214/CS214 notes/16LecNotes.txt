
Processes:

fork()
- generate a duplicate of current process
	- only differences: (immediately after fork)
		0: address space
		1: pid
		2: ppid
		
	- significant similarities: (immediately after fork)
		0: exact same code
		1: same variales/data
		2: file descriptor/file handles
		3: signal disposition
		
- return values from fork are different:
	child: 0
	parent: child's PID
		
	PID 0: scheduler
	PID 1: init
		
file descriptor vs file handle?:
fd: data structure used to access a file
fh: indicates a position to reference within the file

- if you are the child process (PID 0)
 - exec ... load a file and execute it in 'this' process
 - on exec call, all vestiges of parent are dumped
 
 
fork: called once, returns twice (parent and child)
exec: called once, normally does not return (replaces the call to exec in the child with new code)
signal handler: is not called, but does return (because it is invoked by the OS on your behalf)

signals:
- halt execution
- indicates a special event the OS needs to address

signal handler:
- code you write to be run in the event of some particular signal, or group of signals


Exeception model: (jumps past the problem)
try{
... code
}
catch(BOOM!)
{
... run this code
}
... continue here



Signal model: (returns to the problem)

instruction 0
instruction 1
instruction 2
instruc ..SIGNAL! ... halt execution .. trap to OS .. invoke signal handler ... run signal handler to completion ... return ... 
instruction 3 
instruction 4


Zombie process:
Child process that is done computing, but the parent process never called wait() on it

Who is the system-wide foster parent?
... if the parent proc is killed, who takes over parent duties for the child procs?
init takes over













